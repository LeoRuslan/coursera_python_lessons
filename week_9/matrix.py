# Реализуйте класс Matrix. Он должен содержать:
#
# Конструктор от списка списков. Гарантируется, что списки состоят из чисел, не пусты и все имеют одинаковый размер.
# Конструктор должен копировать содержимое списка списков, т. е. при изменении списков,
# от которых была сконструирована матрица, содержимое матрицы изменяться не должно.
#
# Метод __str__, переводящий матрицу в строку.
# При этом элементы внутри одной строки должны быть разделены знаками табуляции, а строки — переносами строк.
# После каждой строки не должно быть символа табуляции и в конце не должно быть переноса строки.
#
# Метод size без аргументов, возвращающий кортеж вида (число строк, число столбцов).

from sys import stdin
from copy import deepcopy


class Matrix:
    def __init__(self, lists):
        self.lists = deepcopy(lists)

    def __str__(self):
        str_rep = ""
        amount = 0
        for lists in self.lists:
            if amount != 0:
                str_rep += "\n"
            new_str = "\t".join(str(elem) for elem in lists)
            str_rep += new_str
            amount += 1
        return str_rep

    def size(self):
        return len(self.lists), len(self.lists[0])


exec(stdin.read())

# m = Matrix([[1, 0], [0, 1]])
# print(m)
# m = Matrix([[2, 0, 0], [0, 1, 10000]])
# print(m)
# m = Matrix([[-10, 20, 50, 2443], [-5235, 12, 4324, 4234]])
# print(m)
#
# m1 = Matrix([[1, 0, 0], [1, 1, 1], [0, 0, 0]])
# m2 = Matrix([[1, 0, 0], [1, 1, 1], [0, 0, 0]])
# print(str(m1) == str(m2))
#
# m = Matrix([[1, 1, 1], [0, 100, 10]])
# print(str(m) == '1\t1\t1\n0\t100\t10')
